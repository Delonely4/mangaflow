// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         Int      @id @default(autoincrement())
  username   String   @unique
  email      String   @unique
  password   String
  avatar     String?
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  readedChapters     ReadedChapter[]
  userBooks          UserBook[]
  favoriteBooks      FavoriteBook[]
  reviews            Review[]
  quotes             Quote[]
  favoriteCharacters FavoriteCharacter[]
  readingLists       ReadingList[]

  @@map("Users")
}

model Book {
  id                 Int      @id @default(autoincrement())
  name               String   @unique
  cover_img          String
  description        String
  status             String
  current_chapter    Float
  total_chapters     Int
  total_chapters_rus Int
  total_chapters_eng Int
  created_at         DateTime @default(now())
  updated_at         DateTime @updatedAt

  readedChapters     ReadedChapter[]
  userBooks          UserBook[]
  favoriteBooks      FavoriteBook[]
  bookAuthors        BookAuthor[]
  bookGenres         BookGenre[]
  bookTags           BookTag[]
  chapters           Chapter[]
  reviews            Review[]
  quotes             Quote[]
  favoriteCharacters FavoriteCharacter[]
  readingLists       ReadingList[]

  @@map("Books")
}

model Author {
  id         Int      @id @default(autoincrement())
  name       String
  name_eng   String?
  created_at DateTime @default(now())

  bookAuthors BookAuthor[]

  @@map("Authors")
}

model Genre {
  id         Int      @id @default(autoincrement())
  name       String   @unique
  created_at DateTime @default(now())

  bookGenres BookGenre[]

  @@map("Genres")
}

model Tag {
  id         Int      @id @default(autoincrement())
  name       String   @unique
  created_at DateTime @default(now())

  bookTags BookTag[]

  @@map("Tags")
}

model Character {
  id            Int      @id @default(autoincrement())
  name          String
  description   String
  character_img String?
  created_at    DateTime @default(now())

  quotes             Quote[]
  favoriteCharacters FavoriteCharacter[]

  @@map("Characters")
}

model BookAuthor {
  book_id   Int
  author_id Int
  role      String?

  book   Book   @relation(fields: [book_id], references: [id], onDelete: Cascade)
  author Author @relation(fields: [author_id], references: [id], onDelete: Cascade)

  @@id([book_id, author_id])
  @@map("BookAuthors")
}

model BookGenre {
  book_id   Int
  genres_id Int

  book  Book  @relation(fields: [book_id], references: [id], onDelete: Cascade)
  genre Genre @relation(fields: [genres_id], references: [id], onDelete: Cascade)

  @@id([book_id, genres_id])
  @@map("BookGenres")
}

model BookTag {
  book_id Int
  tag_id  Int

  book Book @relation(fields: [book_id], references: [id], onDelete: Cascade)
  tag  Tag  @relation(fields: [tag_id], references: [id], onDelete: Cascade)

  @@id([book_id, tag_id])
  @@map("BookTags")
}

model ReadedChapter {
  id         Int      @id @default(autoincrement())
  book_id    Int
  user_id    Int
  number     Float
  language   String
  created_at DateTime @default(now())

  book Book @relation(fields: [book_id], references: [id], onDelete: Cascade)
  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([book_id, user_id, number])
  @@map("ReadedChapters")
}

model UserBook {
  id              Int      @id @default(autoincrement())
  book_id         Int
  user_id         Int
  status          String
  current_chapter Float
  personal_rating Int?
  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt

  book Book @relation(fields: [book_id], references: [id], onDelete: Cascade)
  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([book_id, user_id])
  @@map("UserBooks")
}

model FavoriteBook {
  id         Int      @id @default(autoincrement())
  book_id    Int
  user_id    Int
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  book Book @relation(fields: [book_id], references: [id], onDelete: Cascade)
  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([book_id, user_id])
  @@map("FavoriteBooks")
}

model Chapter {
  id           Int       @id @default(autoincrement())
  book_id      Int
  number       Float
  title        String?
  release_date DateTime?
  created_at   DateTime  @default(now())

  book Book @relation(fields: [book_id], references: [id], onDelete: Cascade)

  @@map("Chapters")
}

model Review {
  id         Int      @id @default(autoincrement())
  user_id    Int
  book_id    Int
  content    String
  rating     Int
  created_at DateTime @default(now())

  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)
  book Book @relation(fields: [book_id], references: [id], onDelete: Cascade)

  @@unique([user_id, book_id])
  @@map("Reviews")
}

model Quote {
  id             Int      @id @default(autoincrement())
  user_id        Int
  book_id        Int
  character_id   Int?
  content        String
  chapter_number Float?
  created_at     DateTime @default(now())

  user      User       @relation(fields: [user_id], references: [id], onDelete: Cascade)
  book      Book       @relation(fields: [book_id], references: [id], onDelete: Cascade)
  character Character? @relation(fields: [character_id], references: [id], onDelete: SetNull)

  @@map("Quotes")
}

model FavoriteCharacter {
  id           Int      @id @default(autoincrement())
  user_id      Int
  book_id      Int
  character_id Int
  created_at   DateTime @default(now())

  user      User      @relation(fields: [user_id], references: [id], onDelete: Cascade)
  book      Book      @relation(fields: [book_id], references: [id], onDelete: Cascade)
  character Character @relation(fields: [character_id], references: [id], onDelete: Cascade)

  @@unique([user_id, book_id, character_id])
  @@map("FavoriteCharacters")
}

model ReadingList {
  id         Int      @id @default(autoincrement())
  user_id    Int
  book_id    Int
  name       String
  is_public  Boolean  @default(false)
  created_at DateTime @default(now())

  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)
  book Book @relation(fields: [book_id], references: [id], onDelete: Cascade)

  @@map("ReadingLists")
}
